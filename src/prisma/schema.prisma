datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  conversations ConversationUser[]
  sessions      Session[]
  memberships   Membership[]
  messages      UserMessage[]
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Org {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  description   String?
  image         String?
  openaiApiKey  String?
  memberships   Membership[]
  characters    Character[]
  conversations Conversation[]
}

model Membership {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  orgId         String   @db.ObjectId
  role          Role     @default(MEMBER)
  userId        String   @db.ObjectId

  org           Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  GUEST
  MEMBER
  OWNER
}

model Character {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  image         String?
  description   String?
  orgId         String   @db.ObjectId
  conversations ConversationCharacter[]
  messages      CharacterMessage[]

  org           Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Conversation {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  latestMessageId     String?   @db.ObjectId @unique
  orgId               String   @db.ObjectId
  characters          ConversationCharacter[]
  messages            CharacterMessage[]
  users               ConversationUser[]
  userMessages        UserMessage[]

  latestMessage       CharacterMessage?      @relation(name: "latestMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  org                 Org                    @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model ConversationCharacter {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  characterId   String   @db.ObjectId
  conversationId String   @db.ObjectId

  character     Character     @relation(fields: [characterId], references: [id])
  conversation  Conversation  @relation(fields: [conversationId], references: [id])
}

model ConversationUser {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  conversationId String   @db.ObjectId
  hasUnread      Boolean  @default(false)
  userId         String   @db.ObjectId

  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

model CharacterMessage {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  content        String
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  type           MessageType     @default(TEXT)

  isLatestIn    Conversation?      @relation(name: "latestMessage")
  conversation  Conversation       @relation(fields: [conversationId], references: [id])
  sender        Character          @relation(fields: [senderId], references: [id])
}

model UserMessage {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  content        String
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  type           MessageType     @default(TEXT)

  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  sender        User          @relation(fields: [senderId], references: [id])
}

enum MessageType {
  TEXT
}
