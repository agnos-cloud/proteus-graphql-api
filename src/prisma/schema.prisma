datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  conversations ConversationUser[]
  memberships   Membership[]
  messages      UserMessage[]
  sessions      Session[]
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Org {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  characters    Character[]
  conversations Conversation[]
  createdAt     DateTime @default(now())
  description   String?
  image         String?
  openaiApiKey  String?   @unique
  members   Membership[]
  updatedAt     DateTime @updatedAt
}

model Membership {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  org           Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String   @db.ObjectId
  role          Role     @default(MEMBER)
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
}

enum Role {
  GUEST
  MEMBER
  OWNER
}

model Character {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  conversations ConversationCharacter[]
  createdAt     DateTime @default(now())
  description   String?
  image         String?
  instruction   String?
  messages      CharacterMessage[]
  modelFamily   ModelFamily         @default(OPENAI)
  org           Org                 @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String              @db.ObjectId
  plan          Plan                @default(FREE)
  planExpiresAt DateTime?
  updatedAt     DateTime            @updatedAt
}

enum ModelFamily {
  GOOGLE_AI
  OPENAI
}

enum Plan {
  ADVANCED
  BASIC
  FREE
  PRO
}

model Conversation {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  characters          ConversationCharacter[]
  createdAt     DateTime @default(now())
  latestMessage       CharacterMessage?      @relation(name: "latestMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  latestMessageId     String?   @db.ObjectId @unique
  messages            CharacterMessage[]
  org                 Org                    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId               String   @db.ObjectId
  updatedAt     DateTime @updatedAt
  users               ConversationUser[]
  userMessages        UserMessage[]

}

model ConversationCharacter {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  character     Character     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId   String   @db.ObjectId
  conversation  Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ConversationUser {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  conversation  Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String   @db.ObjectId
  createdAt     DateTime @default(now())
  hasUnread      Boolean  @default(false)
  updatedAt     DateTime @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @db.ObjectId
}

model CharacterMessage {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  conversation  Conversation       @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String   @db.ObjectId
  createdAt     DateTime @default(now())
  isLatestIn    Conversation?      @relation(name: "latestMessage")
  sender        Character          @relation(fields: [senderId], references: [id])
  senderId       String   @db.ObjectId
  type           MessageType     @default(TEXT)
  updatedAt     DateTime @updatedAt
}

model UserMessage {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  conversation  Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String   @db.ObjectId
  createdAt     DateTime @default(now())
  sender        User          @relation(fields: [senderId], references: [id])
  senderId       String   @db.ObjectId
  type           MessageType     @default(TEXT)
  updatedAt     DateTime @updatedAt
}

enum MessageType {
  TEXT
  ERROR_MESSAGE
}
